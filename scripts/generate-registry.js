import { glob } from "glob";
import { homedir } from "os";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const CONFIG_PATH = `${homedir()}/.config/skadi/config.json`;
const PLUGIN_DIRECTORY = `${homedir()}/.config/skadi/plugins`;
const STYLES_DIRECTORY = `${homedir()}/.config/skadi/styles`;
const OUTPUT_FILE = path.resolve(__dirname, "../src/registry.ts");

/**
 * @param {string} directory
 * @param {string} [ext]
 */
function cleanDirectory(directory, ext) {
  if (!fs.existsSync(directory)) {
    fs.mkdirSync(directory, { recursive: true });
  } else {
    if (ext) {
      let files = fs.readdirSync(directory).filter(file => file.endsWith(ext));

      for (const file of files) {
        fs.unlinkSync(path.join(directory, file));
      }
    } else {
      fs.rmSync(directory, { recursive: true, force: true });
    }

    fs.mkdirSync(directory, { recursive: true });
  }
}

cleanDirectory(path.resolve(__dirname, "../html"));
cleanDirectory(path.resolve(__dirname, "../src"), ".tsx");

/**
 * @param {string} label
 * @returns {string}
 */
function generateHtmlEntryPoint(label) {
  return `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>${label}</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/${label}.tsx"></script>
  </body>
</html>`.trim();
}

/**
 * @param {string} label
 * @returns {string}
 */
function generateTsxEntryPoint(label) {
  return `
import { createRoot } from "react-dom/client";
import plugins from "~/registry";

import "~/index.css";

createRoot(document.getElementById("root")!).render(
  <div className="w-screen h-screen ${label}-window">
    <h1>${label} Window</h1>
    {plugins.map(Plugin => (
      <Plugin key={Plugin.name} />
    ))}
  </div>
);`.trim();
}

/**
 * @typedef {Object} WindowConfig
 * @property {string} label - The label of the window.
 */

/**
 * @typedef {Object} Config
 * @property {WindowConfig[]} windows - The list of window configurations.
 */

// Write html entry points
let raw = fs.readFileSync(CONFIG_PATH, "utf8");

/** @type {Config} */
let config = JSON.parse(raw);

for (const w of config.windows) {
  let htmlContent = generateHtmlEntryPoint(w.label);
  let tsxContent = generateTsxEntryPoint(w.label);

  let htmlFilePath = path.resolve(__dirname, `../html/${w.label}.html`);
  let tsxFilePath = path.resolve(__dirname, `../src/${w.label}.tsx`);

  fs.writeFileSync(htmlFilePath, htmlContent.trim(), "utf8");
  fs.writeFileSync(tsxFilePath, tsxContent.trim(), "utf8");
}

let pluginFiles = glob.sync(`${PLUGIN_DIRECTORY}/*.{jsx,tsx}`);

if (pluginFiles.length === 0) {
  console.error("No plugin files found in the specified directory.");
  process.exit(1);
}

let lazy = [];
let exports = [];

for (const [i, file] of pluginFiles.entries()) {
  let componentName = `Plugin${i + 1}`;

  lazy.push(`const ${componentName} = React.lazy(() => import("${file}"));`);
  exports.push(componentName);
}

let styleFiles = glob.sync(`${STYLES_DIRECTORY}/*.{css,scss}`);
let styleImports = [];

for (const style of styleFiles) {
  styleImports.push(`import "${style}";`);
}

let content = `
/*
 * Copyright 2025 Saverio Scagnoli
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// THIS FILE IS AUTO-GENERATED
// DO NOT EDIT THIS FILE DIRECTLY

import React from "react";

${lazy.join("\n")}

// Styles
${styleImports.join("\n")}

export default [
    ${exports.join(",\n\t")}
];
`;

fs.writeFileSync(OUTPUT_FILE, content.trim(), "utf8");

console.log(`Plugin registry generated at ${OUTPUT_FILE}`);
